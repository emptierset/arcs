from .state import State as State
from .utils import ensure_iterable as ensure_iterable
from _typeshed import Incomplete
from enum import Enum
from typing import TypeVar, Generic, Any
from collections.abc import Sequence, Iterable, Collection

class States:
    # def __init__(self, states: dict[str, State] | None = None) -> None: ...
    # def __eq__(self, other: object) -> bool: ...
    def __getattr__(self, name: str) -> State: ...
    # def __len__(self) -> int: ...
    # def __iter__(self) -> Iterable[State]: ...
    # def append(self, state: State) -> None: ...
    # def items(self) -> Sequence[tuple[str, State]]: ...
    @classmethod
    def from_enum(
        cls,
        enum_type: type[Enum],
        initial: Any,
        final: Any | None = None,
        use_enum_instance: bool = False,
    ) -> States: ...

    # @property
    # def final_states(self) -> list[State]: ...
