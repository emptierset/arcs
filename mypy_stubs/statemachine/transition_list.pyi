from typing import Any
from .transition import Transition as Transition
from .utils import ensure_iterable as ensure_iterable
from typing import Callable, Iterable, Any, TypeVar
from typing_extensions import ParamSpec
from collections.abc import MutableSequence

# from typing import Any
# def __getattr__(name: str) -> Any: ...

P = ParamSpec("P")
T = TypeVar("T")

class TransitionList:
    transitions: MutableSequence[Transition]
    def __init__(self, transitions: Iterable[Transition] | None = None) -> None: ...
    def __or__(self, other: TransitionList | Iterable[Transition]) -> TransitionList: ...
    def add_transitions(
        self, transition: Transition | TransitionList | Iterable[Transition]
    ) -> None: ...
    def __getitem__(self, index: int) -> Transition: ...
    def __len__(self) -> int: ...
    def __call__(self, f: Callable[P, T]) -> Callable[P, T]: ...
    def before(self, f: Callable[P, T]) -> Callable[P, T]: ...
    def after(self, f: Callable[P, T]) -> Callable[P, T]: ...
    def on(self, f: Callable[P, T]) -> Callable[P, T]: ...
    def cond(self, f: Callable[P, T]) -> Callable[P, T]: ...
    def unless(self, f: Callable[P, T]) -> Callable[P, T]: ...
    def validators(self, f: Callable[P, T]) -> Callable[P, T]: ...
    def add_event(self, event: str) -> None: ...
    @property
    def unique_events(self) -> list[str]: ...
